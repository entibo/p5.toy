export default [
	{
		title: "Minimal usage",
		desc: `This is what p5.toy does to your canvas.
Try the different buttons !`,
		js: () => {
			function setup() {
				createCanvas(400, 400);
				createToy();
			}
			function draw() {
				background("white");
				noStroke();
				push();
				translate(width/2, height/2);
				rotate(frameCount/10);
				fill("#dd6666");
				ellipse(50, 0, 75, 75);
				rotate(-2*frameCount/10);
				fill("#6666dd");
				ellipse(125, 0, 50, 50);
				pop();
			}
		}
	},
	{
		title: "Gifs (1)",
		desc: "You can configure the Record button to capture exactly what you need.",
		js: () => {
			var angle = 0;
			function setup() {
				createCanvas(400, 400);
				createToy();
				recordButton = function() {
					angle = 0;
					startGif();
				}
				stopRecordButton = abortGif;
			}
			function draw() {
				background("white");
				noStroke();
				push();
				translate(width/2, height/2);
				rotate(angle);
				fill("#dd6666");
				ellipse(50, 0, 75, 75);
				rotate(-2*angle);
				fill("#6666dd");
				ellipse(125, 0, 50, 50);
				pop();
				angle += 0.1;
				if(angle >= TAU) {
					stopGif();
				}
			}
		}
	},
	{
		title: "Gifs (2)",
		desc: `You can also record a gif without the button.
By default it will open in a new tab once it's done.`,
		js: () => {
			var angle = 0;
			function setup() {
				createCanvas(60, 60);
				gifQuality = 0;
				startGif();
			}
			function draw() {
				background("white");
				noStroke();
				push();
				translate(width/2, height/2);
				rotate(angle);
				fill("#dd6666");
				ellipse(20, 0, 15, 15);
				rotate(-2*angle);
				fill("#6666dd");
				ellipse(5, 0, 10, 10);
				pop();
				angle += 0.1;
				if(angle >= TAU) {
					stopGif();
				}
			}
		}
	},
	{
		title: "Parameters",
		desc: "As soon as you add parameters, the GUI will appear and let you change them on the fly.",
		js: () => {
			function setup() {
				createCanvas(400, 400);
				createToy();
				addDefaultParams();
				gui.defColor("bg", "#fff");
				gui.defColor("red", "#dd6666");
				gui.defColor("blue", "#6666dd");
				gui.def("time", 0).listen();
				gui.def("speed", 0.1).min(-0.5).max(0.5).step(0.01);
			}
			function draw() {
				background(bg);
				noStroke();
				push();
				translate(width/2, height/2);
				rotate(time);
				fill(red);
				ellipse(50, 0, width/5, width/5);
				rotate(-2*time);
				fill(blue);
				ellipse(125, 0, width/7, width/7);
				pop();
				time += speed;
			}
		}
	},
	{
		title: "Snapshot",
		desc: "You can draw something right before the snapshot is taken by configuring the Snapshot button.",
		js: () => {
			function setup() {
			  createCanvas(400, 400);
			  createToy();
			  snapshotButton = function() {
				translate(width/2, height/2);
			    rotate(-PI/4);
			    fill(0, 100);
			    textSize(40);
			    textAlign(CENTER, CENTER);
			    text("WATERMARK", 10, 15);
			  };
			}

			function draw() {
				background("white");
				noStroke();
				push();
				translate(width/2, height/2);
				rotate(frameCount/10);
				fill("#dd6666");
				ellipse(50, 0, 75, 75);
				rotate(-2*frameCount/10);
				fill("#6666dd");
				ellipse(125, 0, 50, 50);
				pop();
			}
		}
	},
	{
		title: "Instances",
		desc: `It also works in instance mode.
Press SPACE while a sketch if focused to play/pause it.
Press CTRL+SPACE to toggle all instances.
`,
		html: "<div id='boxDiv'></div>",
		css: "html, body { display:flex; width:100%; height:100%; justify-content:center; align-items:center; } #boxDiv { width: 420px; display: flex; flex-wrap: wrap; }",
		js: () => {
			for(var i=0; i < 12; i++) {
				(function(i){
					new p5(function(p) {
						p.setup = function() {
							var canvas = p.createCanvas(140, 140);
							canvas.parent("boxDiv");
							p.createToy();
							p.collapseToy();
							p.buttonSize(140/4);
							p.colorMode("hsb");
							p.noStroke();
						}
						p.draw = function() {
							p.background(0, 0, 100);
							var color = ( 3*p.frameCount + p.map(i, 0, 11, 0, 360) )%360;
							p.fill(color, 70, 80);
							p.rect(0, 0, p.width, p.height); 
						}
					});
				})(i);
			}
		}
	}
].map((e, index) => {
	e.title = e.title || `Example ${index+1}`;
	e.desc = e.desc || "";
	e.html = e.html || "";
	e.css = (e.css?e.css:"") + "html,body{width:100%;height:100%;display:flex;justify-content:center;align-items:center;margin:0;}";
	// Only keep the content of the function, and
	// remove any indentation generated by toString
	e.js = e.js ? /\{(.*)\}/.exec(e.js.toString().replace(/(\n|\t)+/g, ""))[1].trim() : "";
	return e;
});